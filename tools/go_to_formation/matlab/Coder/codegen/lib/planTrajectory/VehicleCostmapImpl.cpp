//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: VehicleCostmapImpl.cpp
//
// MATLAB Coder version            : 5.0
// C/C++ source code generated on  : 15-Feb-2021 16:41:56
//

// Include Files
#include "VehicleCostmapImpl.h"
#include "DubinsBuiltins.h"
#include "DubinsPathSegment.h"
#include "Path1.h"
#include "VehicleCostmapCodegen.h"
#include "all.h"
#include "pathToTrajectory.h"
#include "planTrajectory.h"
#include "rt_nonfinite.h"
#include "unique.h"
#include <cmath>
#include <cstring>
#include <string.h>

// Function Definitions

//
// Arguments    : const double xyPoints[12]
//                boolean_T b_free[6]
// Return Type  : void
//
namespace mgen
{
  void c_driving_internal_costmap_Vehi::b_checkFreeWorldPoints(const double
    xyPoints[12], boolean_T b_free[6]) const
  {
    double mapExtent[4];
    int trueCount;
    int partialTrueCount;
    int i;
    double xyPoints_data[12];
    signed char tmp_data[6];
    boolean_T insideMap[6];
    coder::array<double, 2U> b_xyPoints_data;
    coder::array<double, 1U> r;
    double gridIndices_data[6];
    boolean_T b_tmp_data[6];
    this->get_MapExtent(mapExtent);
    trueCount = 0;
    partialTrueCount = 0;
    for (i = 0; i < 6; i++) {
      double d;
      boolean_T b;
      d = xyPoints[i + 6];
      b = ((xyPoints[i] >= mapExtent[0]) && (xyPoints[i] <= mapExtent[1]) && (d >=
            mapExtent[2]) && (d <= mapExtent[3]));
      insideMap[i] = b;
      b_free[i] = false;
      if (b) {
        trueCount++;
        tmp_data[partialTrueCount] = static_cast<signed char>(i + 1);
        partialTrueCount++;
      }
    }

    for (i = 0; i < trueCount; i++) {
      xyPoints_data[i] = xyPoints[tmp_data[i] - 1];
    }

    for (i = 0; i < trueCount; i++) {
      xyPoints_data[i + trueCount] = xyPoints[tmp_data[i] + 5];
    }

    b_xyPoints_data.set((&xyPoints_data[0]), trueCount, 2);
    this->xyPointsToGridIndices(b_xyPoints_data, r);
    partialTrueCount = r.size(0);
    trueCount = r.size(0);
    for (i = 0; i < trueCount; i++) {
      gridIndices_data[i] = r[i];
    }

    for (i = 0; i < partialTrueCount; i++) {
      b_tmp_data[i] = this->FreeMap[static_cast<int>(gridIndices_data[i]) - 1];
    }

    partialTrueCount = 0;
    for (i = 0; i < 6; i++) {
      if (insideMap[i]) {
        b_free[i] = b_tmp_data[partialTrueCount];
        partialTrueCount++;
      }
    }
  }

  //
  // Arguments    : const coder::array<double, 2U> &xyPoints
  //                coder::array<boolean_T, 1U> &b_free
  // Return Type  : void
  //
  void c_driving_internal_costmap_Vehi::c_checkFreeWorldPoints(const coder::
    array<double, 2U> &xyPoints, coder::array<boolean_T, 1U> &b_free) const
  {
    double mapExtent[4];
    int loop_ub;
    coder::array<boolean_T, 1U> insideMap;
    int end;
    int i;
    coder::array<int, 1U> r;
    coder::array<double, 2U> b_xyPoints;
    coder::array<double, 1U> gridIndices;
    coder::array<boolean_T, 1U> r1;
    this->get_MapExtent(mapExtent);
    loop_ub = xyPoints.size(0);
    insideMap.set_size(xyPoints.size(0));
    for (end = 0; end < loop_ub; end++) {
      double d;
      double d1;
      d = xyPoints[end];
      d1 = xyPoints[end + xyPoints.size(0)];
      insideMap[end] = ((d >= mapExtent[0]) && (d <= mapExtent[1]) && (d1 >=
        mapExtent[2]) && (d1 <= mapExtent[3]));
    }

    b_free.set_size(insideMap.size(0));
    loop_ub = insideMap.size(0);
    for (end = 0; end < loop_ub; end++) {
      b_free[end] = false;
    }

    end = insideMap.size(0) - 1;
    loop_ub = 0;
    for (i = 0; i <= end; i++) {
      if (insideMap[i]) {
        loop_ub++;
      }
    }

    r.set_size(loop_ub);
    loop_ub = 0;
    for (i = 0; i <= end; i++) {
      if (insideMap[i]) {
        r[loop_ub] = i + 1;
        loop_ub++;
      }
    }

    b_xyPoints.set_size(r.size(0), 2);
    loop_ub = r.size(0);
    for (end = 0; end < loop_ub; end++) {
      b_xyPoints[end] = xyPoints[r[end] - 1];
    }

    for (end = 0; end < loop_ub; end++) {
      b_xyPoints[end + b_xyPoints.size(0)] = xyPoints[(r[end] + xyPoints.size(0))
        - 1];
    }

    this->xyPointsToGridIndices(b_xyPoints, gridIndices);
    r1.set_size(gridIndices.size(0));
    loop_ub = gridIndices.size(0);
    for (end = 0; end < loop_ub; end++) {
      r1[end] = this->FreeMap[static_cast<int>(gridIndices[end]) - 1];
    }

    end = insideMap.size(0);
    loop_ub = 0;
    for (i = 0; i < end; i++) {
      if (insideMap[i]) {
        b_free[i] = r1[loop_ub];
        loop_ub++;
      }
    }
  }

  //
  // Arguments    : const double xyPoints[30000]
  //                boolean_T b_free[15000]
  // Return Type  : void
  //
  void c_driving_internal_costmap_Vehi::checkFreeWorldPoints(const double
    xyPoints[30000], boolean_T b_free[15000]) const
  {
    double mapExtent[4];
    int trueCount;
    int partialTrueCount;
    int i;
    coder::array<double, 2U> b_xyPoints;
    boolean_T insideMap[15000];
    short tmp_data[15000];
    coder::array<double, 1U> r;
    coder::array<double, 1U> gridIndices;
    boolean_T b_tmp_data[15000];
    this->get_MapExtent(mapExtent);
    trueCount = 0;
    partialTrueCount = 0;
    for (i = 0; i < 15000; i++) {
      double d;
      boolean_T b;
      d = xyPoints[i + 15000];
      b = ((xyPoints[i] >= mapExtent[0]) && (xyPoints[i] <= mapExtent[1]) && (d >=
            mapExtent[2]) && (d <= mapExtent[3]));
      insideMap[i] = b;
      b_free[i] = false;
      if (b) {
        trueCount++;
        tmp_data[partialTrueCount] = static_cast<short>(i + 1);
        partialTrueCount++;
      }
    }

    b_xyPoints.set_size(trueCount, 2);
    for (i = 0; i < trueCount; i++) {
      b_xyPoints[i] = xyPoints[tmp_data[i] - 1];
    }

    for (i = 0; i < trueCount; i++) {
      b_xyPoints[i + b_xyPoints.size(0)] = xyPoints[tmp_data[i] + 14999];
    }

    this->xyPointsToGridIndices(b_xyPoints, r);
    gridIndices.set_size(r.size(0));
    partialTrueCount = r.size(0);
    for (i = 0; i < partialTrueCount; i++) {
      gridIndices[i] = r[i];
    }

    partialTrueCount = gridIndices.size(0);
    for (i = 0; i < partialTrueCount; i++) {
      b_tmp_data[i] = this->FreeMap[static_cast<int>(gridIndices[i]) - 1];
    }

    partialTrueCount = 0;
    for (i = 0; i < 15000; i++) {
      if (insideMap[i]) {
        b_free[i] = b_tmp_data[partialTrueCount];
        partialTrueCount++;
      }
    }
  }

  //
  // Arguments    : const double vehiclePoses[15000]
  //                double xyPoints[30000]
  // Return Type  : void
  //
  void c_driving_internal_costmap_Vehi::vehiclePoseToWorldPoints(const double
    vehiclePoses[15000], double xyPoints[30000]) const
  {
    double collOffsets[3];
    int xyPoints_tmp;
    double idx[5000];
    collOffsets[0] = this->CollisionCheckOffsets[0];
    collOffsets[1] = this->CollisionCheckOffsets[1];
    collOffsets[2] = this->CollisionCheckOffsets[2];
    std::memset(&xyPoints[0], 0, 30000U * sizeof(double));
    for (xyPoints_tmp = 0; xyPoints_tmp < 5000; xyPoints_tmp++) {
      idx[xyPoints_tmp] = static_cast<double>(xyPoints_tmp) + 1.0;
    }

    for (int n = 0; n < 3; n++) {
      double b_collOffsets;
      b_collOffsets = collOffsets[n];
      for (int k = 0; k < 5000; k++) {
        double b_xyPoints_tmp;
        b_xyPoints_tmp = vehiclePoses[k + 10000];
        xyPoints_tmp = static_cast<int>(idx[k]);
        xyPoints[xyPoints_tmp - 1] = vehiclePoses[k] + b_collOffsets * std::cos
          (b_xyPoints_tmp);
        xyPoints[xyPoints_tmp + 14999] = vehiclePoses[k + 5000] + b_collOffsets *
          std::sin(b_xyPoints_tmp);
      }

      for (xyPoints_tmp = 0; xyPoints_tmp < 5000; xyPoints_tmp++) {
        idx[xyPoints_tmp] += 5000.0;
      }
    }
  }

  //
  // Arguments    : const coder::array<double, 2U> &xyPoints
  //                coder::array<double, 1U> &gridIndices
  // Return Type  : void
  //
  void c_driving_internal_costmap_Vehi::xyPointsToGridIndices(const coder::array<
    double, 2U> &xyPoints, coder::array<double, 1U> &gridIndices) const
  {
    double worldOrigin_idx_0;
    double worldOrigin_idx_1;
    coder::array<double, 2U> c;
    int acoef;
    int i;
    int k;
    coder::array<double, 2U> gridLocations;
    worldOrigin_idx_0 = this->MapLocation[0];
    worldOrigin_idx_1 = this->MapLocation[1];
    c.set_size(xyPoints.size(0), 2);
    if (xyPoints.size(0) != 0) {
      acoef = (xyPoints.size(0) != 1);
      i = xyPoints.size(0) - 1;
      for (k = 0; k <= i; k++) {
        c[k] = xyPoints[acoef * k] - worldOrigin_idx_0;
      }

      i = c.size(0) - 1;
      for (k = 0; k <= i; k++) {
        c[k + c.size(0)] = xyPoints[acoef * k + xyPoints.size(0)] -
          worldOrigin_idx_1;
      }
    }

    if (c.size(0) != 0) {
      acoef = c.size(0);
      i = c.size(0) - 1;
      for (int b_i = 0; b_i <= i; b_i++) {
        worldOrigin_idx_0 = c[b_i];
        k = b_i + acoef;
        c[b_i] = c[k];
        c[k] = worldOrigin_idx_0;
      }
    }

    acoef = c.size(0) * c.size(1);
    c.set_size(c.size(0), 2);
    for (i = 0; i < acoef; i++) {
      c[i] = c[i] / 0.01;
    }

    acoef = c.size(0) << 1;
    for (k = 0; k < acoef; k++) {
      c[k] = std::ceil(c[k]);
    }

    gridLocations.set_size(c.size(0), 2);
    acoef = c.size(0) << 1;
    for (k = 0; k < acoef; k++) {
      if (c[k] > 1.0) {
        gridLocations[k] = c[k];
      } else {
        gridLocations[k] = 1.0;
      }
    }

    acoef = gridLocations.size(0);
    gridIndices.set_size(gridLocations.size(0));
    for (i = 0; i < acoef; i++) {
      gridIndices[i] = (401.0 - gridLocations[i]) + (gridLocations[i +
        gridLocations.size(0)] - 1.0) * 400.0;
    }
  }

  //
  // Arguments    : const double xyPoints[3400]
  //                double gridIndices[1700]
  // Return Type  : void
  //
  void c_driving_internal_costmap_Vehi::xyPointsToGridIndices(const double
    xyPoints[3400], double gridIndices[1700]) const
  {
    int k;
    int c_tmp;
    double worldOrigin[2];
    double tmp;
    double c[3400];
    double gridLocations[3400];
    for (k = 0; k < 2; k++) {
      worldOrigin[k] = this->MapLocation[k];
      for (int b_k = 0; b_k < 1700; b_k++) {
        c_tmp = b_k + 1700 * k;
        c[c_tmp] = xyPoints[c_tmp] - worldOrigin[k];
      }
    }

    for (c_tmp = 0; c_tmp < 1700; c_tmp++) {
      tmp = c[c_tmp];
      c[c_tmp] = c[c_tmp + 1700];
      c[c_tmp + 1700] = tmp;
    }

    for (k = 0; k < 3400; k++) {
      tmp = std::ceil(c[k] / 0.01);
      c[k] = tmp;
      if (!(tmp > 1.0)) {
        tmp = 1.0;
      }

      gridLocations[k] = tmp;
    }

    for (c_tmp = 0; c_tmp < 1700; c_tmp++) {
      gridIndices[c_tmp] = (401.0 - gridLocations[c_tmp]) + (gridLocations[c_tmp
        + 1700] - 1.0) * 400.0;
    }
  }

  //
  // Arguments    : const double xyPoints[2]
  // Return Type  : void
  //
  void c_driving_internal_costmap_Vehi::VehicleCostmapImpl_setCosts(const double
    xyPoints[2])
  {
    double u0;
    double b_u0;
    u0 = std::ceil((xyPoints[1] - this->MapLocation[1]) / 0.01);
    if (!(u0 > 1.0)) {
      u0 = 1.0;
    }

    b_u0 = std::ceil((xyPoints[0] - this->MapLocation[0]) / 0.01);
    if (!(b_u0 > 1.0)) {
      b_u0 = 1.0;
    }

    this->Costmap[static_cast<int>((401.0 - u0) + (b_u0 - 1.0) * 400.0) - 1] =
      1.0;
    this->inflate();
  }

  //
  // Arguments    : const double vehiclePoses[6]
  //                boolean_T b_free[2]
  // Return Type  : void
  //
  void c_driving_internal_costmap_Vehi::b_checkFreePoses(const double
    vehiclePoses[6], boolean_T b_free[2]) const
  {
    double collOffsets[3];
    double xyPoints[12];
    double idx_idx_0;
    double idx_idx_1;
    double d;
    double d1;
    boolean_T freeMat[6];
    int xyPoints_tmp;
    boolean_T exitg1;
    collOffsets[0] = this->CollisionCheckOffsets[0];
    collOffsets[1] = this->CollisionCheckOffsets[1];
    collOffsets[2] = this->CollisionCheckOffsets[2];
    std::memset(&xyPoints[0], 0, 12U * sizeof(double));
    idx_idx_0 = 1.0;
    idx_idx_1 = 2.0;
    d = vehiclePoses[4];
    d1 = vehiclePoses[5];
    for (int n = 0; n < 3; n++) {
      xyPoints_tmp = static_cast<int>(idx_idx_0);
      xyPoints[xyPoints_tmp - 1] = vehiclePoses[0] + collOffsets[n] * std::cos(d);
      xyPoints[xyPoints_tmp + 5] = vehiclePoses[2] + collOffsets[n] * std::sin(d);
      xyPoints_tmp = static_cast<int>(idx_idx_1);
      xyPoints[xyPoints_tmp - 1] = vehiclePoses[1] + collOffsets[n] * std::cos
        (d1);
      xyPoints[xyPoints_tmp + 5] = vehiclePoses[3] + collOffsets[n] * std::sin
        (d1);
      idx_idx_0 += 2.0;
      idx_idx_1 += 2.0;
    }

    this->b_checkFreeWorldPoints(xyPoints, freeMat);
    b_free[0] = true;
    b_free[1] = true;
    xyPoints_tmp = 1;
    exitg1 = false;
    while ((!exitg1) && (xyPoints_tmp <= 5)) {
      if (!freeMat[xyPoints_tmp - 1]) {
        b_free[0] = false;
        exitg1 = true;
      } else {
        xyPoints_tmp += 2;
      }
    }

    xyPoints_tmp = 2;
    exitg1 = false;
    while ((!exitg1) && (xyPoints_tmp <= 6)) {
      if (!freeMat[xyPoints_tmp - 1]) {
        b_free[1] = false;
        exitg1 = true;
      } else {
        xyPoints_tmp += 2;
      }
    }
  }

  //
  // Arguments    : const coder::array<double, 2U> &vehiclePoses
  //                coder::array<boolean_T, 1U> &b_free
  // Return Type  : void
  //
  void c_driving_internal_costmap_Vehi::c_checkFreePoses(const coder::array<
    double, 2U> &vehiclePoses, coder::array<boolean_T, 1U> &b_free) const
  {
    double collOffsets[3];
    double unnamed_idx_0;
    int i;
    coder::array<double, 2U> xyPoints;
    int loop_ub;
    coder::array<double, 2U> idx;
    int b_loop_ub;
    int c_loop_ub;
    coder::array<boolean_T, 1U> freeMat;
    coder::array<double, 1U> x;
    int k;
    coder::array<double, 1U> b_x;
    coder::array<boolean_T, 2U> b_freeMat;
    coder::array<int, 1U> r;
    collOffsets[0] = this->CollisionCheckOffsets[0];
    collOffsets[1] = this->CollisionCheckOffsets[1];
    collOffsets[2] = this->CollisionCheckOffsets[2];
    unnamed_idx_0 = 3.0 * static_cast<double>(vehiclePoses.size(0));
    i = static_cast<int>(unnamed_idx_0);
    xyPoints.set_size(i, 2);
    loop_ub = i << 1;
    for (i = 0; i < loop_ub; i++) {
      xyPoints[i] = 0.0;
    }

    if (vehiclePoses.size(0) < 1) {
      idx.set_size(1, 0);
    } else {
      idx.set_size(1, (static_cast<int>(static_cast<double>(vehiclePoses.size(0))
        - 1.0) + 1));
      loop_ub = static_cast<int>(static_cast<double>(vehiclePoses.size(0)) - 1.0);
      for (i = 0; i <= loop_ub; i++) {
        idx[i] = static_cast<double>(i) + 1.0;
      }
    }

    loop_ub = vehiclePoses.size(0);
    b_loop_ub = vehiclePoses.size(0);
    c_loop_ub = vehiclePoses.size(0);
    for (int n = 0; n < 3; n++) {
      x.set_size(loop_ub);
      b_x.set_size(vehiclePoses.size(0));
      for (k = 0; k < loop_ub; k++) {
        unnamed_idx_0 = vehiclePoses[k + vehiclePoses.size(0) * 2];
        x[k] = std::cos(unnamed_idx_0);
        b_x[k] = std::sin(unnamed_idx_0);
      }

      k = idx.size(1);
      r.set_size(idx.size(1));
      for (i = 0; i < k; i++) {
        r[i] = static_cast<int>(idx[i]) - 1;
      }

      unnamed_idx_0 = collOffsets[n];
      for (i = 0; i < b_loop_ub; i++) {
        xyPoints[r[i]] = vehiclePoses[i] + unnamed_idx_0 * x[i];
      }

      for (i = 0; i < c_loop_ub; i++) {
        xyPoints[r[i] + xyPoints.size(0)] = vehiclePoses[i + vehiclePoses.size(0)]
          + unnamed_idx_0 * b_x[i];
      }

      i = idx.size(0) * idx.size(1);
      idx.set_size(1, idx.size(1));
      k = i - 1;
      for (i = 0; i <= k; i++) {
        idx[i] = idx[i] + static_cast<double>(vehiclePoses.size(0));
      }
    }

    this->c_checkFreeWorldPoints(xyPoints, freeMat);
    k = vehiclePoses.size(0);
    b_freeMat = freeMat.reshape(k, 3);
    all(b_freeMat, b_free);
  }

  //
  // Arguments    : const double vehiclePoses[15000]
  //                boolean_T b_free[5000]
  // Return Type  : void
  //
  void c_driving_internal_costmap_Vehi::checkFreePoses(const double
    vehiclePoses[15000], boolean_T b_free[5000]) const
  {
    static double xyPoints[30000];
    boolean_T freeMat[15000];
    int i;
    int i1;
    int i2;
    int ix;
    this->vehiclePoseToWorldPoints(vehiclePoses, xyPoints);
    this->checkFreeWorldPoints(xyPoints, freeMat);
    for (i = 0; i < 5000; i++) {
      b_free[i] = true;
    }

    i = -1;
    i1 = 0;
    i2 = 10000;
    for (int j = 0; j < 5000; j++) {
      boolean_T exitg1;
      i1++;
      i2++;
      i++;
      ix = i1;
      exitg1 = false;
      while ((!exitg1) && (ix <= i2)) {
        if (!freeMat[ix - 1]) {
          b_free[i] = false;
          exitg1 = true;
        } else {
          ix += 5000;
        }
      }
    }
  }

  //
  // Arguments    : const double xyPoints[8]
  // Return Type  : void
  //
  void c_driving_internal_costmap_Vehi::setCosts(const double xyPoints[8])
  {
    int k;
    double tmp;
    double c[8];
    int c_tmp;
    double gridLocations[8];
    for (k = 0; k < 2; k++) {
      int b_c_tmp;
      tmp = this->MapLocation[k];
      c_tmp = k << 2;
      c[c_tmp] = xyPoints[c_tmp] - tmp;
      b_c_tmp = c_tmp + 1;
      c[b_c_tmp] = xyPoints[b_c_tmp] - tmp;
      b_c_tmp = c_tmp + 2;
      c[b_c_tmp] = xyPoints[b_c_tmp] - tmp;
      c_tmp += 3;
      c[c_tmp] = xyPoints[c_tmp] - tmp;
    }

    tmp = c[0];
    c[0] = c[4];
    c[4] = tmp;
    tmp = c[1];
    c[1] = c[5];
    c[5] = tmp;
    tmp = c[2];
    c[2] = c[6];
    c[6] = tmp;
    tmp = c[3];
    c[3] = c[7];
    c[7] = tmp;
    for (k = 0; k < 8; k++) {
      tmp = std::ceil(c[k] / 0.01);
      c[k] = tmp;
      if (!(tmp > 1.0)) {
        tmp = 1.0;
      }

      gridLocations[k] = tmp;
    }

    this->Costmap[static_cast<int>((401.0 - gridLocations[0]) + (gridLocations[4]
      - 1.0) * 400.0) - 1] = 1.0;
    this->Costmap[static_cast<int>((401.0 - gridLocations[1]) + (gridLocations[5]
      - 1.0) * 400.0) - 1] = 1.0;
    this->Costmap[static_cast<int>((401.0 - gridLocations[2]) + (gridLocations[6]
      - 1.0) * 400.0) - 1] = 1.0;
    this->Costmap[static_cast<int>((401.0 - gridLocations[3]) + (gridLocations[7]
      - 1.0) * 400.0) - 1] = 1.0;
    this->inflate();
  }

  //
  // Arguments    : void
  // Return Type  : void
  //
  void c_driving_internal_costmap_Vehi::setCosts()
  {
    static const double dv[3400] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.01002227171492205, 0.0200445434298441, 0.030066815144766147,
      0.0400890868596882, 0.05011135857461025, 0.060133630289532294,
      0.070155902004454346, 0.0801781737193764, 0.090200445434298449,
      0.1002227171492205, 0.11024498886414255, 0.12026726057906459,
      0.13028953229398665, 0.14031180400890869, 0.15033407572383076,
      0.16035634743875279, 0.17037861915367483, 0.1804008908685969,
      0.19042316258351893, 0.200445434298441, 0.21046770601336304,
      0.2204899777282851, 0.23051224944320714, 0.24053452115812918,
      0.25055679287305122, 0.26057906458797331, 0.27060133630289535,
      0.28062360801781738, 0.29064587973273942, 0.30066815144766151,
      0.31069042316258355, 0.32071269487750559, 0.33073496659242763,
      0.34075723830734966, 0.35077951002227176, 0.36080178173719379,
      0.37082405345211583, 0.38084632516703787, 0.39086859688195996,
      0.400890868596882, 0.41091314031180404, 0.42093541202672607,
      0.43095768374164811, 0.44097995545657021, 0.45100222717149224,
      0.46102449888641428, 0.47104677060133632, 0.48106904231625836,
      0.49109131403118045, 0.50111358574610243, 0.51113585746102452,
      0.52115812917594662, 0.5311804008908686, 0.54120267260579069,
      0.55122494432071278, 0.56124721603563477, 0.57126948775055686,
      0.58129175946547884, 0.59131403118040093, 0.601336302895323,
      0.611358574610245, 0.6213808463251671, 0.63140311804008908,
      0.64142538975501118, 0.65144766146993327, 0.66146993318485525,
      0.67149220489977735, 0.68151447661469933, 0.69153674832962142,
      0.70155902004454351, 0.7115812917594655, 0.72160356347438759,
      0.73162583518930957, 0.74164810690423166, 0.75167037861915376,
      0.76169265033407574, 0.77171492204899783, 0.78173719376391992,
      0.79175946547884191, 0.801781737193764, 0.811804008908686,
      0.82182628062360807, 0.83184855233853017, 0.84187082405345215,
      0.85189309576837424, 0.86191536748329622, 0.87193763919821832,
      0.88195991091314041, 0.89198218262806239, 0.90200445434298449,
      0.91202672605790647, 0.92204899777282856, 0.93207126948775065,
      0.94209354120267264, 0.95211581291759473, 0.96213808463251671,
      0.9721603563474388, 0.9821826280623609, 0.99220489977728288,
      1.0022271714922049, 1.012249443207127, 1.022271714922049,
      1.0322939866369711, 1.0423162583518932, 1.0523385300668151,
      1.0623608017817372, 1.0723830734966593, 1.0824053452115814,
      1.0924276169265035, 1.1024498886414256, 1.1124721603563474,
      1.1224944320712695, 1.1325167037861916, 1.1425389755011137,
      1.1525612472160358, 1.1625835189309577, 1.1726057906458798,
      1.1826280623608019, 1.192650334075724, 1.2026726057906461,
      1.2126948775055679, 1.22271714922049, 1.2327394209354121,
      1.2427616926503342, 1.2527839643652563, 1.2628062360801782,
      1.2728285077951003, 1.2828507795100224, 1.2928730512249444,
      1.3028953229398665, 1.3129175946547884, 1.3229398663697105,
      1.3329621380846326, 1.3429844097995547, 1.3530066815144768,
      1.3630289532293987, 1.3730512249443207, 1.3830734966592428,
      1.3930957683741649, 1.403118040089087, 1.4131403118040089,
      1.423162583518931, 1.4331848552338531, 1.4432071269487752,
      1.4532293986636973, 1.4632516703786191, 1.4732739420935412,
      1.4832962138084633, 1.4933184855233854, 1.5033407572383075,
      1.5133630289532296, 1.5233853006681515, 1.5334075723830736,
      1.5434298440979957, 1.5534521158129178, 1.5634743875278398,
      1.5734966592427617, 1.5835189309576838, 1.5935412026726059,
      1.603563474387528, 1.61358574610245, 1.623608017817372, 1.6336302895322941,
      1.6436525612472161, 1.6536748329621382, 1.6636971046770603,
      1.6737193763919822, 1.6837416481069043, 1.6937639198218264,
      1.7037861915367485, 1.7138084632516706, 1.7238307349665924,
      1.7338530066815145, 1.7438752783964366, 1.7538975501113587,
      1.7639198218262808, 1.7739420935412027, 1.7839643652561248,
      1.7939866369710469, 1.804008908685969, 1.8140311804008911,
      1.8240534521158129, 1.834075723830735, 1.8440979955456571,
      1.8541202672605792, 1.8641425389755013, 1.8741648106904232,
      1.8841870824053453, 1.8942093541202674, 1.9042316258351895,
      1.9142538975501115, 1.9242761692650334, 1.9342984409799555,
      1.9443207126948776, 1.9543429844097997, 1.9643652561247218,
      1.9743875278396439, 1.9844097995545658, 1.9944320712694878,
      2.0044543429844097, 2.014476614699332, 2.0244988864142539,
      2.0345211581291762, 2.0445434298440981, 2.05456570155902,
      2.0645879732739423, 2.0746102449888641, 2.0846325167037865,
      2.0946547884187083, 2.10467706013363, 2.1146993318485525,
      2.1247216035634744, 2.1347438752783967, 2.1447661469933186,
      2.1547884187082409, 2.1648106904231628, 2.1748329621380846,
      2.184855233853007, 2.1948775055679288, 2.2048997772828511,
      2.214922048997773, 2.2249443207126949, 2.2349665924276172,
      2.2449888641425391, 2.2550111358574614, 2.2650334075723833,
      2.2750556792873051, 2.2850779510022274, 2.2951002227171493,
      2.3051224944320716, 2.3151447661469935, 2.3251670378619154,
      2.3351893095768377, 2.3452115812917596, 2.3552338530066819,
      2.3652561247216037, 2.3752783964365256, 2.3853006681514479,
      2.39532293986637, 2.4053452115812921, 2.415367483296214,
      2.4253897550111359, 2.4354120267260582, 2.44543429844098,
      2.4554565701559024, 2.4654788418708242, 2.4755011135857461,
      2.4855233853006684, 2.4955456570155903, 2.5055679287305126,
      2.5155902004454345, 2.5256124721603563, 2.5356347438752787,
      2.5456570155902005, 2.5556792873051228, 2.5657015590200447,
      2.5757238307349666, 2.5857461024498889, 2.5957683741648108,
      2.6057906458797331, 2.615812917594655, 2.6258351893095768,
      2.6358574610244991, 2.645879732739421, 2.6559020044543433,
      2.6659242761692652, 2.6759465478841871, 2.6859688195991094,
      2.6959910913140313, 2.7060133630289536, 2.7160356347438754,
      2.7260579064587973, 2.7360801781737196, 2.7461024498886415,
      2.7561247216035638, 2.7661469933184857, 2.7761692650334076,
      2.78619153674833, 2.7962138084632517, 2.8062360801781741,
      2.8162583518930959, 2.8262806236080178, 2.83630289532294,
      2.846325167037862, 2.8563474387527843, 2.8663697104677062,
      2.876391982182628, 2.8864142538975504, 2.8964365256124722,
      2.9064587973273945, 2.9164810690423164, 2.9265033407572383,
      2.9365256124721606, 2.9465478841870825, 2.9565701559020048,
      2.9665924276169267, 2.9766146993318485, 2.9866369710467708,
      2.9966592427616927, 3.006681514476615, 3.0167037861915369,
      3.0267260579064592, 3.0367483296213811, 3.046770601336303,
      3.0567928730512253, 3.0668151447661471, 3.0768374164810695,
      3.0868596881959913, 3.0968819599109132, 3.1069042316258355,
      3.1169265033407574, 3.1269487750556797, 3.1369710467706016,
      3.1469933184855234, 3.1570155902004458, 3.1670378619153676,
      3.17706013363029, 3.1870824053452118, 3.1971046770601337,
      3.207126948775056, 3.2171492204899779, 3.2271714922049, 3.2371937639198221,
      3.2472160356347439, 3.2572383073496662, 3.2672605790645881,
      3.2772828507795104, 3.2873051224944323, 3.2973273942093542,
      3.3073496659242765, 3.3173719376391984, 3.3273942093541207,
      3.3374164810690425, 3.3474387527839644, 3.3574610244988867,
      3.3674832962138086, 3.3775055679287309, 3.3875278396436528,
      3.3975501113585747, 3.407572383073497, 3.4175946547884188,
      3.4276169265033412, 3.437639198218263, 3.4476614699331849,
      3.4576837416481072, 3.4677060133630291, 3.4777282850779514,
      3.4877505567928733, 3.4977728285077951, 3.5077951002227175,
      3.5178173719376393, 3.5278396436525616, 3.5378619153674835,
      3.5478841870824054, 3.5579064587973277, 3.5679287305122496,
      3.5779510022271719, 3.5879732739420938, 3.5979955456570156,
      3.6080178173719379, 3.61804008908686, 3.6280623608017821,
      3.638084632516704, 3.6481069042316259, 3.6581291759465482,
      3.66815144766147, 3.6781737193763924, 3.6881959910913142,
      3.6982182628062361, 3.7082405345211584, 3.7182628062360803,
      3.7282850779510026, 3.7383073496659245, 3.7483296213808464,
      3.7583518930957687, 3.7683741648106905, 3.7783964365256129,
      3.7884187082405347, 3.7984409799554566, 3.8084632516703789,
      3.8184855233853008, 3.8285077951002231, 3.838530066815145,
      3.8485523385300668, 3.8585746102449892, 3.868596881959911,
      3.8786191536748333, 3.8886414253897552, 3.8986636971046775,
      3.9086859688195994, 3.9187082405345213, 3.9287305122494436,
      3.9387527839643655, 3.9487750556792878, 3.9587973273942096,
      3.9688195991091315, 3.9788418708240538, 3.9888641425389757,
      3.998886414253898, 4.0089086859688194, 4.0189309576837422,
      4.0289532293986641, 4.0389755011135859, 4.0489977728285078,
      4.05902004454343, 4.0690423162583524, 4.0790645879732743,
      4.0890868596881962, 4.0991091314031181, 4.10913140311804,
      4.1191536748329627, 4.1291759465478846, 4.1391982182628064,
      4.1492204899777283, 4.15924276169265, 4.1692650334075729,
      4.1792873051224948, 4.1893095768374167, 4.1993318485523385,
      4.20935412026726, 4.2193763919821832, 4.229398663697105,
      4.2394209354120269, 4.2494432071269488, 4.2594654788418707,
      4.2694877505567934, 4.2795100222717153, 4.2895322939866372,
      4.299554565701559, 4.3095768374164818, 4.3195991091314037,
      4.3296213808463255, 4.3396436525612474, 4.3496659242761693,
      4.359688195991092, 4.3697104677060139, 4.3797327394209358,
      4.3897550111358576, 4.3997772828507795, 4.4097995545657023,
      4.4198218262806241, 4.429844097995546, 4.4398663697104679,
      4.44988864142539, 4.4599109131403125, 4.4699331848552344,
      4.4799554565701563, 4.4899777282850781, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
      4.5, 4.5, 4.5, 4.5, 0.0, 0.01002227171492205, 0.0200445434298441,
      0.030066815144766147, 0.0400890868596882, 0.05011135857461025,
      0.060133630289532294, 0.070155902004454346, 0.0801781737193764,
      0.090200445434298449, 0.1002227171492205, 0.11024498886414255,
      0.12026726057906459, 0.13028953229398665, 0.14031180400890869,
      0.15033407572383076, 0.16035634743875279, 0.17037861915367483,
      0.1804008908685969, 0.19042316258351893, 0.200445434298441,
      0.21046770601336304, 0.2204899777282851, 0.23051224944320714,
      0.24053452115812918, 0.25055679287305122, 0.26057906458797331,
      0.27060133630289535, 0.28062360801781738, 0.29064587973273942,
      0.30066815144766151, 0.31069042316258355, 0.32071269487750559,
      0.33073496659242763, 0.34075723830734966, 0.35077951002227176,
      0.36080178173719379, 0.37082405345211583, 0.38084632516703787,
      0.39086859688195996, 0.400890868596882, 0.41091314031180404,
      0.42093541202672607, 0.43095768374164811, 0.44097995545657021,
      0.45100222717149224, 0.46102449888641428, 0.47104677060133632,
      0.48106904231625836, 0.49109131403118045, 0.50111358574610243,
      0.51113585746102452, 0.52115812917594662, 0.5311804008908686,
      0.54120267260579069, 0.55122494432071278, 0.56124721603563477,
      0.57126948775055686, 0.58129175946547884, 0.59131403118040093,
      0.601336302895323, 0.611358574610245, 0.6213808463251671,
      0.63140311804008908, 0.64142538975501118, 0.65144766146993327,
      0.66146993318485525, 0.67149220489977735, 0.68151447661469933,
      0.69153674832962142, 0.70155902004454351, 0.7115812917594655,
      0.72160356347438759, 0.73162583518930957, 0.74164810690423166,
      0.75167037861915376, 0.76169265033407574, 0.77171492204899783,
      0.78173719376391992, 0.79175946547884191, 0.801781737193764,
      0.811804008908686, 0.82182628062360807, 0.83184855233853017,
      0.84187082405345215, 0.85189309576837424, 0.86191536748329622,
      0.87193763919821832, 0.88195991091314041, 0.89198218262806239,
      0.90200445434298449, 0.91202672605790647, 0.92204899777282856,
      0.93207126948775065, 0.94209354120267264, 0.95211581291759473,
      0.96213808463251671, 0.9721603563474388, 0.9821826280623609,
      0.99220489977728288, 1.0022271714922049, 1.012249443207127,
      1.022271714922049, 1.0322939866369711, 1.0423162583518932,
      1.0523385300668151, 1.0623608017817372, 1.0723830734966593,
      1.0824053452115814, 1.0924276169265035, 1.1024498886414256,
      1.1124721603563474, 1.1224944320712695, 1.1325167037861916,
      1.1425389755011137, 1.1525612472160358, 1.1625835189309577,
      1.1726057906458798, 1.1826280623608019, 1.192650334075724,
      1.2026726057906461, 1.2126948775055679, 1.22271714922049,
      1.2327394209354121, 1.2427616926503342, 1.2527839643652563,
      1.2628062360801782, 1.2728285077951003, 1.2828507795100224,
      1.2928730512249444, 1.3028953229398665, 1.3129175946547884,
      1.3229398663697105, 1.3329621380846326, 1.3429844097995547,
      1.3530066815144768, 1.3630289532293987, 1.3730512249443207,
      1.3830734966592428, 1.3930957683741649, 1.403118040089087,
      1.4131403118040089, 1.423162583518931, 1.4331848552338531,
      1.4432071269487752, 1.4532293986636973, 1.4632516703786191,
      1.4732739420935412, 1.4832962138084633, 1.4933184855233854,
      1.5033407572383075, 1.5133630289532296, 1.5233853006681515,
      1.5334075723830736, 1.5434298440979957, 1.5534521158129178,
      1.5634743875278398, 1.5734966592427617, 1.5835189309576838,
      1.5935412026726059, 1.603563474387528, 1.61358574610245, 1.623608017817372,
      1.6336302895322941, 1.6436525612472161, 1.6536748329621382,
      1.6636971046770603, 1.6737193763919822, 1.6837416481069043,
      1.6937639198218264, 1.7037861915367485, 1.7138084632516706,
      1.7238307349665924, 1.7338530066815145, 1.7438752783964366,
      1.7538975501113587, 1.7639198218262808, 1.7739420935412027,
      1.7839643652561248, 1.7939866369710469, 1.804008908685969,
      1.8140311804008911, 1.8240534521158129, 1.834075723830735,
      1.8440979955456571, 1.8541202672605792, 1.8641425389755013,
      1.8741648106904232, 1.8841870824053453, 1.8942093541202674,
      1.9042316258351895, 1.9142538975501115, 1.9242761692650334,
      1.9342984409799555, 1.9443207126948776, 1.9543429844097997,
      1.9643652561247218, 1.9743875278396439, 1.9844097995545658,
      1.9944320712694878, 2.0044543429844097, 2.014476614699332,
      2.0244988864142539, 2.0345211581291762, 2.0445434298440981,
      2.05456570155902, 2.0645879732739423, 2.0746102449888641,
      2.0846325167037865, 2.0946547884187083, 2.10467706013363,
      2.1146993318485525, 2.1247216035634744, 2.1347438752783967,
      2.1447661469933186, 2.1547884187082409, 2.1648106904231628,
      2.1748329621380846, 2.184855233853007, 2.1948775055679288,
      2.2048997772828511, 2.214922048997773, 2.2249443207126949,
      2.2349665924276172, 2.2449888641425391, 2.2550111358574614,
      2.2650334075723833, 2.2750556792873051, 2.2850779510022274,
      2.2951002227171493, 2.3051224944320716, 2.3151447661469935,
      2.3251670378619154, 2.3351893095768377, 2.3452115812917596,
      2.3552338530066819, 2.3652561247216037, 2.3752783964365256,
      2.3853006681514479, 2.39532293986637, 2.4053452115812921,
      2.415367483296214, 2.4253897550111359, 2.4354120267260582,
      2.44543429844098, 2.4554565701559024, 2.4654788418708242,
      2.4755011135857461, 2.4855233853006684, 2.4955456570155903,
      2.5055679287305126, 2.5155902004454345, 2.5256124721603563,
      2.5356347438752787, 2.5456570155902005, 2.5556792873051228,
      2.5657015590200447, 2.5757238307349666, 2.5857461024498889,
      2.5957683741648108, 2.6057906458797331, 2.615812917594655,
      2.6258351893095768, 2.6358574610244991, 2.645879732739421,
      2.6559020044543433, 2.6659242761692652, 2.6759465478841871,
      2.6859688195991094, 2.6959910913140313, 2.7060133630289536,
      2.7160356347438754, 2.7260579064587973, 2.7360801781737196,
      2.7461024498886415, 2.7561247216035638, 2.7661469933184857,
      2.7761692650334076, 2.78619153674833, 2.7962138084632517,
      2.8062360801781741, 2.8162583518930959, 2.8262806236080178,
      2.83630289532294, 2.846325167037862, 2.8563474387527843,
      2.8663697104677062, 2.876391982182628, 2.8864142538975504,
      2.8964365256124722, 2.9064587973273945, 2.9164810690423164,
      2.9265033407572383, 2.9365256124721606, 2.9465478841870825,
      2.9565701559020048, 2.9665924276169267, 2.9766146993318485,
      2.9866369710467708, 2.9966592427616927, 3.006681514476615,
      3.0167037861915369, 3.0267260579064592, 3.0367483296213811,
      3.046770601336303, 3.0567928730512253, 3.0668151447661471,
      3.0768374164810695, 3.0868596881959913, 3.0968819599109132,
      3.1069042316258355, 3.1169265033407574, 3.1269487750556797,
      3.1369710467706016, 3.1469933184855234, 3.1570155902004458,
      3.1670378619153676, 3.17706013363029, 3.1870824053452118,
      3.1971046770601337, 3.207126948775056, 3.2171492204899779, 3.2271714922049,
      3.2371937639198221, 3.2472160356347439, 3.2572383073496662,
      3.2672605790645881, 3.2772828507795104, 3.2873051224944323,
      3.2973273942093542, 3.3073496659242765, 3.3173719376391984,
      3.3273942093541207, 3.3374164810690425, 3.3474387527839644,
      3.3574610244988867, 3.3674832962138086, 3.3775055679287309,
      3.3875278396436528, 3.3975501113585747, 3.407572383073497,
      3.4175946547884188, 3.4276169265033412, 3.437639198218263,
      3.4476614699331849, 3.4576837416481072, 3.4677060133630291,
      3.4777282850779514, 3.4877505567928733, 3.4977728285077951,
      3.5077951002227175, 3.5178173719376393, 3.5278396436525616,
      3.5378619153674835, 3.5478841870824054, 3.5579064587973277,
      3.5679287305122496, 3.5779510022271719, 3.5879732739420938,
      3.5979955456570156, 3.6080178173719379, 3.61804008908686,
      3.6280623608017821, 3.638084632516704, 3.6481069042316259,
      3.6581291759465482, 3.66815144766147, 3.6781737193763924,
      3.6881959910913142, 3.6982182628062361, 3.7082405345211584,
      3.7182628062360803, 3.7282850779510026, 3.7383073496659245,
      3.7483296213808464, 3.7583518930957687, 3.7683741648106905,
      3.7783964365256129, 3.7884187082405347, 3.7984409799554566,
      3.8084632516703789, 3.8184855233853008, 3.8285077951002231,
      3.838530066815145, 3.8485523385300668, 3.8585746102449892,
      3.868596881959911, 3.8786191536748333, 3.8886414253897552,
      3.8986636971046775, 3.9086859688195994, 3.9187082405345213,
      3.9287305122494436, 3.9387527839643655, 3.9487750556792878,
      3.9587973273942096, 3.9688195991091315, 3.9788418708240538,
      3.9888641425389757, 3.998886414253898, 4.0089086859688194,
      4.0189309576837422, 4.0289532293986641, 4.0389755011135859,
      4.0489977728285078, 4.05902004454343, 4.0690423162583524,
      4.0790645879732743, 4.0890868596881962, 4.0991091314031181,
      4.10913140311804, 4.1191536748329627, 4.1291759465478846,
      4.1391982182628064, 4.1492204899777283, 4.15924276169265,
      4.1692650334075729, 4.1792873051224948, 4.1893095768374167,
      4.1993318485523385, 4.20935412026726, 4.2193763919821832,
      4.229398663697105, 4.2394209354120269, 4.2494432071269488,
      4.2594654788418707, 4.2694877505567934, 4.2795100222717153,
      4.2895322939866372, 4.299554565701559, 4.3095768374164818,
      4.3195991091314037, 4.3296213808463255, 4.3396436525612474,
      4.3496659242761693, 4.359688195991092, 4.3697104677060139,
      4.3797327394209358, 4.3897550111358576, 4.3997772828507795,
      4.4097995545657023, 4.4198218262806241, 4.429844097995546,
      4.4398663697104679, 4.44988864142539, 4.4599109131403125,
      4.4699331848552344, 4.4799554565701563, 4.4899777282850781, 4.5, 0.0,
      0.010025062656641603, 0.020050125313283207, 0.03007518796992481,
      0.040100250626566414, 0.050125313283208017, 0.060150375939849621,
      0.070175438596491224, 0.080200501253132828, 0.090225563909774431,
      0.10025062656641603, 0.11027568922305764, 0.12030075187969924,
      0.13032581453634084, 0.14035087719298245, 0.15037593984962405,
      0.16040100250626566, 0.17042606516290726, 0.18045112781954886,
      0.19047619047619047, 0.20050125313283207, 0.21052631578947367,
      0.22055137844611528, 0.23057644110275688, 0.24060150375939848,
      0.25062656641604009, 0.26065162907268169, 0.27067669172932329,
      0.2807017543859649, 0.2907268170426065, 0.3007518796992481,
      0.31077694235588971, 0.32080200501253131, 0.33082706766917291,
      0.34085213032581452, 0.35087719298245612, 0.36090225563909772,
      0.37092731829573933, 0.38095238095238093, 0.39097744360902253,
      0.40100250626566414, 0.41102756892230574, 0.42105263157894735,
      0.43107769423558895, 0.44110275689223055, 0.45112781954887216,
      0.46115288220551376, 0.47117794486215536, 0.48120300751879697,
      0.49122807017543857, 0.50125313283208017, 0.51127819548872178,
      0.52130325814536338, 0.531328320802005, 0.54135338345864659,
      0.55137844611528819, 0.56140350877192979, 0.5714285714285714,
      0.581453634085213, 0.5914786967418546, 0.60150375939849621,
      0.61152882205513781, 0.62155388471177941, 0.631578947368421,
      0.64160401002506262, 0.65162907268170422, 0.66165413533834583,
      0.67167919799498743, 0.681704260651629, 0.69172932330827064,
      0.70175438596491224, 0.71177944862155385, 0.72180451127819545,
      0.731829573934837, 0.74185463659147866, 0.75187969924812026,
      0.76190476190476186, 0.77192982456140347, 0.78195488721804507,
      0.79197994987468667, 0.80200501253132828, 0.81203007518796988,
      0.82205513784461148, 0.83208020050125309, 0.84210526315789469,
      0.85213032581453629, 0.8621553884711779, 0.8721804511278195,
      0.8822055137844611, 0.89223057644110271, 0.90225563909774431,
      0.91228070175438591, 0.92230576441102752, 0.93233082706766912,
      0.94235588972431072, 0.95238095238095233, 0.96240601503759393,
      0.97243107769423553, 0.98245614035087714, 0.99248120300751874,
      1.0025062656641603, 1.0125313283208019, 1.0225563909774436,
      1.0325814536340852, 1.0426065162907268, 1.0526315789473684,
      1.06265664160401, 1.0726817042606516, 1.0827067669172932,
      1.0927318295739348, 1.1027568922305764, 1.112781954887218,
      1.1228070175438596, 1.1328320802005012, 1.1428571428571428,
      1.1528822055137844, 1.162907268170426, 1.1729323308270676,
      1.1829573934837092, 1.1929824561403508, 1.2030075187969924,
      1.213032581453634, 1.2230576441102756, 1.2330827067669172,
      1.2431077694235588, 1.2531328320802004, 1.263157894736842,
      1.2731829573934836, 1.2832080200501252, 1.2932330827067668,
      1.3032581453634084, 1.31328320802005, 1.3233082706766917,
      1.3333333333333333, 1.3433583959899749, 1.3533834586466165,
      1.3634085213032581, 1.3734335839598997, 1.3834586466165413,
      1.3934837092731829, 1.4035087719298245, 1.4135338345864661,
      1.4235588972431077, 1.4335839598997493, 1.4436090225563909,
      1.4536340852130325, 1.4636591478696741, 1.4736842105263157,
      1.4837092731829573, 1.4937343358395989, 1.5037593984962405,
      1.5137844611528821, 1.5238095238095237, 1.5338345864661653,
      1.5438596491228069, 1.5538847117794485, 1.5639097744360901,
      1.5739348370927317, 1.5839598997493733, 1.5939849624060149,
      1.6040100250626566, 1.6140350877192982, 1.6240601503759398,
      1.6340852130325814, 1.644110275689223, 1.6541353383458646,
      1.6641604010025062, 1.6741854636591478, 1.6842105263157894,
      1.694235588972431, 1.7042606516290726, 1.7142857142857142,
      1.7243107769423558, 1.7343358395989974, 1.744360902255639,
      1.7543859649122806, 1.7644110275689222, 1.7744360902255638,
      1.7844611528822054, 1.794486215538847, 1.8045112781954886,
      1.8145363408521302, 1.8245614035087718, 1.8345864661654134,
      1.844611528822055, 1.8546365914786966, 1.8646616541353382,
      1.8746867167919798, 1.8847117794486214, 1.8947368421052631,
      1.9047619047619047, 1.9147869674185463, 1.9248120300751879,
      1.9348370927318295, 1.9448621553884711, 1.9548872180451127,
      1.9649122807017543, 1.9749373433583959, 1.9849624060150375,
      1.9949874686716791, 2.0050125313283207, 2.0150375939849621,
      2.0250626566416039, 2.0350877192982457, 2.0451127819548871,
      2.0551378446115285, 2.0651629072681703, 2.0751879699248121,
      2.0852130325814535, 2.0952380952380949, 2.1052631578947367,
      2.1152882205513786, 2.12531328320802, 2.1353383458646613,
      2.1453634085213031, 2.155388471177945, 2.1654135338345863,
      2.1754385964912277, 2.1854636591478696, 2.1954887218045114,
      2.2055137844611528, 2.2155388471177941, 2.225563909774436,
      2.2355889724310778, 2.2456140350877192, 2.2556390977443606,
      2.2656641604010024, 2.2756892230576442, 2.2857142857142856,
      2.295739348370927, 2.3057644110275688, 2.3157894736842106,
      2.325814536340852, 2.3358395989974934, 2.3458646616541352,
      2.355889724310777, 2.3659147869674184, 2.37593984962406,
      2.3859649122807016, 2.3959899749373434, 2.4060150375939848,
      2.4160401002506262, 2.426065162907268, 2.43609022556391,
      2.4461152882205512, 2.4561403508771926, 2.4661654135338344,
      2.4761904761904763, 2.4862155388471177, 2.496240601503759,
      2.5062656641604009, 2.5162907268170427, 2.5263157894736841,
      2.5363408521303255, 2.5463659147869673, 2.5563909774436091,
      2.5664160401002505, 2.5764411027568919, 2.5864661654135337,
      2.5964912280701755, 2.6065162907268169, 2.6165413533834583,
      2.6265664160401, 2.6365914786967419, 2.6466165413533833,
      2.6566416040100247, 2.6666666666666665, 2.6766917293233083,
      2.6867167919799497, 2.6967418546365911, 2.7067669172932329,
      2.7167919799498748, 2.7268170426065161, 2.7368421052631575,
      2.7468671679197993, 2.7568922305764412, 2.7669172932330826,
      2.7769423558897239, 2.7869674185463658, 2.7969924812030076,
      2.807017543859649, 2.8170426065162903, 2.8270676691729322,
      2.837092731829574, 2.8471177944862154, 2.8571428571428568,
      2.8671679197994986, 2.8771929824561404, 2.8872180451127818,
      2.8972431077694232, 2.907268170426065, 2.9172932330827068,
      2.9273182957393482, 2.9373433583959896, 2.9473684210526314,
      2.9573934837092732, 2.9674185463659146, 2.977443609022556,
      2.9874686716791978, 2.9974937343358397, 3.007518796992481,
      3.0175438596491224, 3.0275689223057642, 3.0375939849624061,
      3.0476190476190474, 3.0576441102756888, 3.0676691729323307,
      3.0776942355889725, 3.0877192982456139, 3.0977443609022552,
      3.1077694235588971, 3.1177944862155389, 3.1278195488721803,
      3.1378446115288217, 3.1478696741854635, 3.1578947368421053,
      3.1679197994987467, 3.1779448621553881, 3.18796992481203,
      3.1979949874686717, 3.2080200501253131, 3.2180451127819545,
      3.2280701754385963, 3.2380952380952381, 3.2481203007518795,
      3.2581453634085209, 3.2681704260651627, 3.2781954887218046,
      3.2882205513784459, 3.2982456140350873, 3.3082706766917291,
      3.318295739348371, 3.3283208020050123, 3.3383458646616537,
      3.3483709273182956, 3.3583959899749374, 3.3684210526315788,
      3.37844611528822, 3.388471177944862, 3.3984962406015038,
      3.4085213032581452, 3.4185463659147866, 3.4285714285714284,
      3.43859649122807, 3.4486215538847116, 3.458646616541353,
      3.4686716791979948, 3.4786967418546366, 3.488721804511278,
      3.4987468671679194, 3.5087719298245612, 3.518796992481203,
      3.5288220551378444, 3.5388471177944858, 3.5488721804511276,
      3.5588972431077694, 3.5689223057644108, 3.5789473684210522,
      3.588972431077694, 3.5989974937343359, 3.6090225563909772,
      3.6190476190476186, 3.6290726817042605, 3.6390977443609023,
      3.6491228070175437, 3.659147869674185, 3.6691729323308269,
      3.6791979949874687, 3.68922305764411, 3.6992481203007515,
      3.7092731829573933, 3.7192982456140351, 3.7293233082706765,
      3.7393483709273179, 3.7493734335839597, 3.7593984962406015,
      3.7694235588972429, 3.7794486215538843, 3.7894736842105261,
      3.7994987468671679, 3.8095238095238093, 3.8195488721804507,
      3.8295739348370925, 3.8395989974937343, 3.8496240601503757,
      3.8596491228070171, 3.8696741854636589, 3.8796992481203008,
      3.8897243107769421, 3.8997493734335835, 3.9097744360902253,
      3.9197994987468672, 3.9298245614035086, 3.93984962406015,
      3.9498746867167918, 3.9598997493734336, 3.969924812030075,
      3.9799498746867163, 3.9899749373433582, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010025062656641603,
      0.020050125313283207, 0.03007518796992481, 0.040100250626566414,
      0.050125313283208017, 0.060150375939849621, 0.070175438596491224,
      0.080200501253132828, 0.090225563909774431, 0.10025062656641603,
      0.11027568922305764, 0.12030075187969924, 0.13032581453634084,
      0.14035087719298245, 0.15037593984962405, 0.16040100250626566,
      0.17042606516290726, 0.18045112781954886, 0.19047619047619047,
      0.20050125313283207, 0.21052631578947367, 0.22055137844611528,
      0.23057644110275688, 0.24060150375939848, 0.25062656641604009,
      0.26065162907268169, 0.27067669172932329, 0.2807017543859649,
      0.2907268170426065, 0.3007518796992481, 0.31077694235588971,
      0.32080200501253131, 0.33082706766917291, 0.34085213032581452,
      0.35087719298245612, 0.36090225563909772, 0.37092731829573933,
      0.38095238095238093, 0.39097744360902253, 0.40100250626566414,
      0.41102756892230574, 0.42105263157894735, 0.43107769423558895,
      0.44110275689223055, 0.45112781954887216, 0.46115288220551376,
      0.47117794486215536, 0.48120300751879697, 0.49122807017543857,
      0.50125313283208017, 0.51127819548872178, 0.52130325814536338,
      0.531328320802005, 0.54135338345864659, 0.55137844611528819,
      0.56140350877192979, 0.5714285714285714, 0.581453634085213,
      0.5914786967418546, 0.60150375939849621, 0.61152882205513781,
      0.62155388471177941, 0.631578947368421, 0.64160401002506262,
      0.65162907268170422, 0.66165413533834583, 0.67167919799498743,
      0.681704260651629, 0.69172932330827064, 0.70175438596491224,
      0.71177944862155385, 0.72180451127819545, 0.731829573934837,
      0.74185463659147866, 0.75187969924812026, 0.76190476190476186,
      0.77192982456140347, 0.78195488721804507, 0.79197994987468667,
      0.80200501253132828, 0.81203007518796988, 0.82205513784461148,
      0.83208020050125309, 0.84210526315789469, 0.85213032581453629,
      0.8621553884711779, 0.8721804511278195, 0.8822055137844611,
      0.89223057644110271, 0.90225563909774431, 0.91228070175438591,
      0.92230576441102752, 0.93233082706766912, 0.94235588972431072,
      0.95238095238095233, 0.96240601503759393, 0.97243107769423553,
      0.98245614035087714, 0.99248120300751874, 1.0025062656641603,
      1.0125313283208019, 1.0225563909774436, 1.0325814536340852,
      1.0426065162907268, 1.0526315789473684, 1.06265664160401,
      1.0726817042606516, 1.0827067669172932, 1.0927318295739348,
      1.1027568922305764, 1.112781954887218, 1.1228070175438596,
      1.1328320802005012, 1.1428571428571428, 1.1528822055137844,
      1.162907268170426, 1.1729323308270676, 1.1829573934837092,
      1.1929824561403508, 1.2030075187969924, 1.213032581453634,
      1.2230576441102756, 1.2330827067669172, 1.2431077694235588,
      1.2531328320802004, 1.263157894736842, 1.2731829573934836,
      1.2832080200501252, 1.2932330827067668, 1.3032581453634084,
      1.31328320802005, 1.3233082706766917, 1.3333333333333333,
      1.3433583959899749, 1.3533834586466165, 1.3634085213032581,
      1.3734335839598997, 1.3834586466165413, 1.3934837092731829,
      1.4035087719298245, 1.4135338345864661, 1.4235588972431077,
      1.4335839598997493, 1.4436090225563909, 1.4536340852130325,
      1.4636591478696741, 1.4736842105263157, 1.4837092731829573,
      1.4937343358395989, 1.5037593984962405, 1.5137844611528821,
      1.5238095238095237, 1.5338345864661653, 1.5438596491228069,
      1.5538847117794485, 1.5639097744360901, 1.5739348370927317,
      1.5839598997493733, 1.5939849624060149, 1.6040100250626566,
      1.6140350877192982, 1.6240601503759398, 1.6340852130325814,
      1.644110275689223, 1.6541353383458646, 1.6641604010025062,
      1.6741854636591478, 1.6842105263157894, 1.694235588972431,
      1.7042606516290726, 1.7142857142857142, 1.7243107769423558,
      1.7343358395989974, 1.744360902255639, 1.7543859649122806,
      1.7644110275689222, 1.7744360902255638, 1.7844611528822054,
      1.794486215538847, 1.8045112781954886, 1.8145363408521302,
      1.8245614035087718, 1.8345864661654134, 1.844611528822055,
      1.8546365914786966, 1.8646616541353382, 1.8746867167919798,
      1.8847117794486214, 1.8947368421052631, 1.9047619047619047,
      1.9147869674185463, 1.9248120300751879, 1.9348370927318295,
      1.9448621553884711, 1.9548872180451127, 1.9649122807017543,
      1.9749373433583959, 1.9849624060150375, 1.9949874686716791,
      2.0050125313283207, 2.0150375939849621, 2.0250626566416039,
      2.0350877192982457, 2.0451127819548871, 2.0551378446115285,
      2.0651629072681703, 2.0751879699248121, 2.0852130325814535,
      2.0952380952380949, 2.1052631578947367, 2.1152882205513786,
      2.12531328320802, 2.1353383458646613, 2.1453634085213031,
      2.155388471177945, 2.1654135338345863, 2.1754385964912277,
      2.1854636591478696, 2.1954887218045114, 2.2055137844611528,
      2.2155388471177941, 2.225563909774436, 2.2355889724310778,
      2.2456140350877192, 2.2556390977443606, 2.2656641604010024,
      2.2756892230576442, 2.2857142857142856, 2.295739348370927,
      2.3057644110275688, 2.3157894736842106, 2.325814536340852,
      2.3358395989974934, 2.3458646616541352, 2.355889724310777,
      2.3659147869674184, 2.37593984962406, 2.3859649122807016,
      2.3959899749373434, 2.4060150375939848, 2.4160401002506262,
      2.426065162907268, 2.43609022556391, 2.4461152882205512,
      2.4561403508771926, 2.4661654135338344, 2.4761904761904763,
      2.4862155388471177, 2.496240601503759, 2.5062656641604009,
      2.5162907268170427, 2.5263157894736841, 2.5363408521303255,
      2.5463659147869673, 2.5563909774436091, 2.5664160401002505,
      2.5764411027568919, 2.5864661654135337, 2.5964912280701755,
      2.6065162907268169, 2.6165413533834583, 2.6265664160401,
      2.6365914786967419, 2.6466165413533833, 2.6566416040100247,
      2.6666666666666665, 2.6766917293233083, 2.6867167919799497,
      2.6967418546365911, 2.7067669172932329, 2.7167919799498748,
      2.7268170426065161, 2.7368421052631575, 2.7468671679197993,
      2.7568922305764412, 2.7669172932330826, 2.7769423558897239,
      2.7869674185463658, 2.7969924812030076, 2.807017543859649,
      2.8170426065162903, 2.8270676691729322, 2.837092731829574,
      2.8471177944862154, 2.8571428571428568, 2.8671679197994986,
      2.8771929824561404, 2.8872180451127818, 2.8972431077694232,
      2.907268170426065, 2.9172932330827068, 2.9273182957393482,
      2.9373433583959896, 2.9473684210526314, 2.9573934837092732,
      2.9674185463659146, 2.977443609022556, 2.9874686716791978,
      2.9974937343358397, 3.007518796992481, 3.0175438596491224,
      3.0275689223057642, 3.0375939849624061, 3.0476190476190474,
      3.0576441102756888, 3.0676691729323307, 3.0776942355889725,
      3.0877192982456139, 3.0977443609022552, 3.1077694235588971,
      3.1177944862155389, 3.1278195488721803, 3.1378446115288217,
      3.1478696741854635, 3.1578947368421053, 3.1679197994987467,
      3.1779448621553881, 3.18796992481203, 3.1979949874686717,
      3.2080200501253131, 3.2180451127819545, 3.2280701754385963,
      3.2380952380952381, 3.2481203007518795, 3.2581453634085209,
      3.2681704260651627, 3.2781954887218046, 3.2882205513784459,
      3.2982456140350873, 3.3082706766917291, 3.318295739348371,
      3.3283208020050123, 3.3383458646616537, 3.3483709273182956,
      3.3583959899749374, 3.3684210526315788, 3.37844611528822,
      3.388471177944862, 3.3984962406015038, 3.4085213032581452,
      3.4185463659147866, 3.4285714285714284, 3.43859649122807,
      3.4486215538847116, 3.458646616541353, 3.4686716791979948,
      3.4786967418546366, 3.488721804511278, 3.4987468671679194,
      3.5087719298245612, 3.518796992481203, 3.5288220551378444,
      3.5388471177944858, 3.5488721804511276, 3.5588972431077694,
      3.5689223057644108, 3.5789473684210522, 3.588972431077694,
      3.5989974937343359, 3.6090225563909772, 3.6190476190476186,
      3.6290726817042605, 3.6390977443609023, 3.6491228070175437,
      3.659147869674185, 3.6691729323308269, 3.6791979949874687,
      3.68922305764411, 3.6992481203007515, 3.7092731829573933,
      3.7192982456140351, 3.7293233082706765, 3.7393483709273179,
      3.7493734335839597, 3.7593984962406015, 3.7694235588972429,
      3.7794486215538843, 3.7894736842105261, 3.7994987468671679,
      3.8095238095238093, 3.8195488721804507, 3.8295739348370925,
      3.8395989974937343, 3.8496240601503757, 3.8596491228070171,
      3.8696741854636589, 3.8796992481203008, 3.8897243107769421,
      3.8997493734335835, 3.9097744360902253, 3.9197994987468672,
      3.9298245614035086, 3.93984962406015, 3.9498746867167918,
      3.9598997493734336, 3.969924812030075, 3.9799498746867163,
      3.9899749373433582, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
      4.0, 4.0, 4.0, 4.0, 4.0 };

    double gridIndices[1700];
    this->xyPointsToGridIndices(dv, gridIndices);
    for (int i = 0; i < 1700; i++) {
      this->Costmap[static_cast<int>(gridIndices[i]) - 1] = 1.0;
    }

    this->inflate();
  }
}

//
// File trailer for VehicleCostmapImpl.cpp
//
// [EOF]
//
