// MIT License
// 
// Copyright (c) 2020 Lehrstuhl Informatik 11 - RWTH Aachen University
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is part of cpm_lab.
// 
// Author: i11 - Embedded Software, RWTH Aachen University

/*
 * Provides commonroad planning problem data to all participants (only goal states, due to size issues for whole planning problem)
 */

#ifndef COMMONROAD_DDS_GOAL_STATE
#define COMMONROAD_DDS_GOAL_STATE

#include "Header.idl"
#include "CommonroadDDSShape.idl"

//An interval with which inexact positions can be provided
//If intervals or exact values are possible, intervals with the same start and end value are being provided
struct CommonroadDDSInterval {
    double interval_start;
    double interval_end;
};

//Interval defintion
struct CommonroadDDSIntervals {
    sequence<CommonroadDDSInterval> intervals;
};

//An exact or inexact position definition
struct CommonroadDDSPositionInterval {
    sequence<CommonroadDDSCircle> circles;
    sequence<CommonroadDDSPolygon> polygons;
    sequence<CommonroadDDSRectangle> rectangles;
    sequence<long> lanelet_refs; //These should rather not be used, because lanelets are currently not being transmitted to the HLCs
};

//A single commonroad goal state
struct CommonroadDDSGoalState {
    CommonroadDDSIntervals time;
    boolean time_set; //If false, ignore time
    sequence<CommonroadDDSPositionInterval> positions;
    sequence<CommonroadDDSIntervals> orientations;
    sequence<CommonroadDDSIntervals> velocities; 

    //ID to relate to planning problem and position in list planning problems and of goal states in planning problems in a single planning problem definition
    //We could not send the whole planning problem due to size issues because of the sequences used
    long planning_problem_id; //@key
    long planning_problem_pos;
    long goal_state_pos;
};

#endif