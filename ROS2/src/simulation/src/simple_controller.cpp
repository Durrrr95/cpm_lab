#include <regex>
#include <algorithm>
#include "rclcpp/rclcpp.hpp"
#include "cpm_msgs/msg/vehicle_sensors.hpp"
#include "cpm_msgs/msg/vehicle_observation.hpp"
#include "cpm_msgs/msg/vehicle_command.hpp"
#include "cpm_tools/Subscriber.hpp"       
#include "cpm_tools/CpmNode.hpp"

using namespace cpm_tools;

struct VehcileContext {
    int active_waypoint_index = 0;
    rclcpp::Publisher<cpm_msgs::msg::VehicleCommand>::SharedPtr command_publisher;
    cpm_tools::Subscriber<cpm_msgs::msg::VehicleObservation>::SharedPtr observation_subscriber;
};


const vector<double> path_x {1158.905852,1173.597639,1177.384895,1170.201128,1152.172464,1123.615439,1085.031439,1033.972208,954.315718,862.714902,762.485605,656.382314,546.556828,434.581648,321.516001,207.997305,94.345968,-11.773572,-81.029873,-150.286174,-219.542475,-288.798775,-358.055076,-427.311377,-496.567678,-565.823978,-635.080279,-712.331099,-825.999244,-939.625324,-1053.035824,-1165.811782,-1277.179585,-1385.909767,-1490.232816,-1587.785845,-1675.609141,-1746.759253,-1791.508068,-1826.650895,-1851.570718,-1865.830013,-1869.178422,-1861.557158,-1843.100029,-1814.131094,-1775.158970,-1722.931702,-1642.727743,-1550.721570,-1450.208408,-1343.918917,-1233.980927,-1121.944922,-1008.851378,-895.322963,-781.669685,-677.326622,-608.070321,-538.814020,-469.557719,-400.301418,-331.045118,-261.788817,-192.532516,-123.276215,-54.019915,25.007464,138.675206,252.297265,365.692438,478.429644,589.718901,698.310605,802.412269,899.636795,987.001473,1064.463819,1131.202755,1169.145542,1176.404095,1152.617219,1098.968579,1018.127801,914.117625,792.113732,658.187193,525.244538,412.649612,303.767934,200.484240,103.755895,13.769023,-69.900433,-148.137035,-222.155648,-293.392482,-345.934669,-345.934786,-345.934902,-345.935018,-345.935135,-345.935251,-345.935368,-345.935484,-345.935601,-345.935717,-364.115469,-434.556304,-507.022329,-583.024269,-663.897805,-750.704277,-844.110992,-944.250509,-1050.563675,-1161.638456,-1297.391048,-1487.417792,-1653.607775,-1779.660839,-1853.213520,-1867.051667,-1819.818016,-1716.145309,-1566.201912,-1384.694488,-1212.573136,-1100.077657,-991.390355,-888.356157,-791.898477,-702.175973,-618.743410,-540.700654,-466.822032,-395.664468,-345.935775,-345.935659,-345.935542,-345.935426,-345.935309,-345.935193,-345.935077,-345.934960,-345.934844,-345.934727,-324.956281,-254.464846,-181.885513,-105.712878,-24.620199,62.440545,156.118103,256.520458,363.057407,474.279594,578.201157,660.539015,740.980292,818.112651,890.581853,957.115532,1016.545531,1067.828419,1110.063804,1142.510143,};
const vector<double> path_y {557.092339,638.593813,721.322257,803.825179,884.654048,962.389723,1035.667371,1107.009162,1187.908720,1255.031572,1308.471779,1349.076319,1378.216632,1397.602183,1409.140502,1414.841235,1416.757618,1416.954828,1416.954828,1416.954828,1416.954828,1416.954828,1416.954828,1416.954828,1416.954828,1416.954828,1416.954828,1416.952817,1416.388148,1413.382028,1405.870337,1391.810425,1369.219987,1336.247757,1291.284276,1233.118130,1161.138044,1080.293859,1010.609698,935.620896,856.644057,775.065804,692.318436,609.854777,529.122669,451.539556,378.467589,306.452850,226.094372,159.526455,106.620123,66.503279,37.787691,18.753590,7.487796,1.978016,0.170050,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.003673,0.626283,3.773058,11.507695,25.871357,48.842708,82.265758,127.737359,186.449091,258.983435,349.959140,472.367943,606.525862,745.757022,883.133101,1011.818088,1125.408453,1218.251793,1285.728104,1324.479679,1332.886878,1318.298987,1286.027651,1238.755445,1179.168340,1109.789239,1032.887305,950.448266,864.190695,775.614818,708.478122,708.477973,708.477823,708.477674,708.477525,708.477375,708.477226,708.477077,708.476927,708.476778,685.175273,595.963093,508.393122,423.883260,344.037428,270.706109,206.020100,152.385156,112.423113,88.844296,85.728983,132.663900,236.075422,385.820802,567.212799,762.460229,952.412949,1118.440125,1244.257578,1317.524952,1332.674752,1317.330235,1284.406631,1236.590912,1176.565173,1106.843452,1029.683790,947.060661,860.682791,772.043022,708.478113,708.477964,708.477815,708.477665,708.477516,708.477367,708.477217,708.477068,708.476919,708.476769,681.591866,592.419790,504.943997,420.588428,340.965848,267.937520,203.645652,150.506177,111.147431,88.279497,84.005379,92.883208,112.569239,142.717837,182.799672,232.111013,289.786085,354.812266,426.047868,502.242184,};
const vector<double> path_yaw {1.326147,1.458748,1.591350,1.723951,1.856552,1.989153,2.121755,2.262006,2.431863,2.583515,2.716960,2.832201,2.929236,3.008066,3.068690,3.111109,3.135322,3.141593,3.141593,3.141593,3.141593,3.141593,3.141593,3.141593,3.141593,3.141593,3.141593,3.141888,3.154267,3.184852,3.233643,3.300639,3.385841,3.489248,3.610860,3.750678,3.908701,4.075240,4.207841,4.340442,4.473044,4.605645,4.738246,4.870847,5.003449,5.136050,5.268651,5.410743,5.579871,5.730795,5.863512,5.978025,6.074331,6.152433,6.212329,6.254019,6.277504,6.283185,6.283185,6.283185,6.283185,6.283185,6.283185,6.283185,6.283185,6.283185,6.283185,6.283626,6.296734,6.328047,6.377566,6.445290,6.531220,6.635355,6.757696,6.898242,7.056994,7.243052,7.466589,7.690127,7.913664,8.137202,8.360739,8.584277,8.807814,9.031352,9.254889,9.467903,9.636303,9.786498,9.918488,10.032272,10.127851,10.205224,10.264392,10.305354,10.328111,10.333231,10.333231,10.333231,10.333231,10.333231,10.333231,10.333231,10.333231,10.333231,10.333231,10.332616,10.318779,10.286738,10.236491,10.168038,10.081380,9.976517,9.853448,9.712174,9.552694,9.339870,9.025396,8.710923,8.396449,8.081975,7.767501,7.453028,7.138554,6.824080,6.509606,6.232975,6.065302,5.915836,5.784574,5.671519,5.576668,5.500023,5.441584,5.401350,5.379321,5.374732,5.374732,5.374732,5.374732,5.374732,5.374732,5.374732,5.374732,5.374732,5.374732,5.375552,5.390116,5.422886,5.473861,5.543042,5.630428,5.736020,5.859817,6.001819,6.162027,6.324292,6.456893,6.589494,6.722095,6.854697,6.987298,7.119899,7.252501,7.385102,7.517703,};
const vector<double> path_curvature {0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001574,0.001414,0.001254,0.001094,0.000934,0.000774,0.000613,0.000453,0.000293,0.000133,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,0.000029,0.000189,0.000349,0.000509,0.000669,0.000830,0.000990,0.001150,0.001310,0.001470,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001568,0.001408,0.001248,0.001087,0.000927,0.000767,0.000607,0.000447,0.000287,0.000127,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,0.000035,0.000195,0.000356,0.000516,0.000676,0.000836,0.000996,0.001156,0.001317,0.001477,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001562,0.001401,0.001241,0.001081,0.000921,0.000761,0.000601,0.000440,0.000280,0.000120,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000000,-0.000042,-0.000202,-0.000362,-0.000522,-0.000682,-0.000842,-0.001003,-0.001163,-0.001323,-0.001483,-0.001600,-0.001600,-0.001600,-0.001600,-0.001600,-0.001600,-0.001600,-0.001600,-0.001600,-0.001600,-0.001555,-0.001395,-0.001235,-0.001075,-0.000915,-0.000754,-0.000594,-0.000434,-0.000274,-0.000114,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000048,0.000208,0.000368,0.000529,0.000689,0.000849,0.001009,0.001169,0.001329,0.001489,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,0.001600,};

inline double distance(double dx, double dy) { return sqrt(dx*dx + dy*dy); }

class SimpleSimulationNode : public CpmNode {    
    map<string, VehcileContext> vehicles;
    int update_counter = 0;

public:
    SimpleSimulationNode()
    :CpmNode("SimpleSimulationNode", 20 * NANOSEC_PER_MILLISEC, 10 * NANOSEC_PER_MILLISEC, false)
    { }

    map<string, vector<string>> find_topics(string topic_name_regex_pattern, string required_type_name)
    {
        auto topics = get_topic_names_and_types();
        map<string, vector<string>> topic_matches;
        for(auto e:topics) {
            auto topic_name = e.first;
            for(auto type_name:e.second) {
                if(type_name == required_type_name) {
                    std::smatch m;
                    if(std::regex_match(topic_name, m, std::regex(topic_name_regex_pattern))) {
                        vector<string> groups;
                        for(auto g:m) groups.push_back(g);
                        topic_matches[topic_name] = groups;
                        break;
                    }
                }
            }
        }
        return topic_matches;
    }

    vector<string> find_vehicles() 
    {
        auto topics = find_topics("/vehicle(..)/observation", "cpm_msgs/VehicleObservation");
        vector<string> vehicle_ids;
        for(auto e:topics) {
            auto topic_name = e.first;
            if(e.second.size() == 2) {
                vehicle_ids.push_back(e.second[1]);
            }
        }
        return vehicle_ids;
    }

    void update_vehicle_connections() {
        auto vehicle_ids = find_vehicles();

        // Add new vehicles
        for(auto id:vehicle_ids) {
            if(vehicles.count(id) == 0) {
                VehcileContext ctx;

                ctx.command_publisher = create_publisher<cpm_msgs::msg::VehicleCommand>(
                    "vehicle" + id + "/command", rmw_qos_profile_sensor_data);

                ctx.observation_subscriber = subscribe<cpm_msgs::msg::VehicleObservation>(
                    "vehicle" + id + "/observation", 10 * NANOSEC_PER_MILLISEC);

                vehicles[id] = ctx;
            }
        }
    }

    void update(uint64_t deadline_nanoseconds) override 
    {
        if(update_counter % 100 == 0) update_vehicle_connections();

        for(auto& e:vehicles) {
            auto& vehicle = e.second;

            // Read input
            bool old_message_flag = false;
            auto observation = vehicle.observation_subscriber->get(deadline_nanoseconds, old_message_flag);

            const double x = observation.pose.position.x;
            const double y = observation.pose.position.y;
            const double yaw = atan2(observation.pose.orientation.z, observation.pose.orientation.w) * 2;

            // Update active path waypoint
            while(true) {
                int next_waypoint_index = (vehicle.active_waypoint_index + 1) % path_x.size();

                double waypoint_distance = distance(
                    1e-3*path_x[vehicle.active_waypoint_index] - x,
                    1e-3*path_y[vehicle.active_waypoint_index] - y);

                double next_waypoint_distance = distance(
                    1e-3*path_x[next_waypoint_index] - x,
                    1e-3*path_y[next_waypoint_index] - y);

                if(next_waypoint_distance < waypoint_distance) {
                    vehicle.active_waypoint_index = next_waypoint_index;
                } else {
                    break;
                }
            }

            // Controller reference values
            const double x_ref = 1e-3*path_x[vehicle.active_waypoint_index];
            const double y_ref = 1e-3*path_y[vehicle.active_waypoint_index];
            const double yaw_ref = path_yaw[vehicle.active_waypoint_index];
            const double curvature_ref = 1e3*path_curvature[vehicle.active_waypoint_index];
            double lateral_error = -sin(yaw_ref) * (x-x_ref)  +cos(yaw_ref) * (y-y_ref);
            double yaw_error = sin(yaw-yaw_ref);


            lateral_error = fmin(0.1,fmax(-0.1, lateral_error));
            yaw_error = fmin(0.5,fmax(-0.5, yaw_error));


            /*cout 
            << "[" << "id" << ": " <<  e.first << "]"
            << "[" << "active_waypoint" << ": " <<  vehicle.active_waypoint_index << "]"
            << "[" << "lateral_error" << ": " <<  lateral_error << "]"
            << "[" << "yaw_error" << ": " <<  yaw_error << "]"
            << endl;*/

            // Linear control law
            const double curvature = curvature_ref -12.0 * lateral_error -7.0 * yaw_error;

            // Send command
            auto command = cpm_msgs::msg::VehicleCommand();
            command.stamp_nanoseconds = deadline_nanoseconds;
            command.speed = 0.5;
            command.curvature = curvature;
            vehicle.command_publisher->publish(command);
        }
    }
};

int main(int argc, char* argv[]) {
    rclcpp::init(argc, argv);
    auto node = std::make_shared<SimpleSimulationNode>();
    std::thread node_thread([&](){node->start_loop();});
    rclcpp::spin(node);
    rclcpp::shutdown();
    node_thread.join();
    return 0;
}