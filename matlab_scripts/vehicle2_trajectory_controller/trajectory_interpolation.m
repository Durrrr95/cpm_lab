function [...
    position_x, ...
    position_y, ...
    velocity_x, ...
    velocity_y, ...
    acceleration_x, ...
    acceleration_y, ...
    yaw, ...
    speed, ...
    curvature...
    ] ...
    = trajectory_interpolation(...
t_interp,...
t_start, ...
position_start_x, ...
position_start_y, ...
velocity_start_x, ...
velocity_start_y, ...
t_end, ...
position_end_x, ...
position_end_y, ...
velocity_end_x,...
velocity_end_y...
)

    delta_t = t_end - t_start;
    tau = (t_interp - t_start) ./ delta_t;
    
    tau2 = tau .* tau;
    tau3 = tau .* tau2;
    
    velocity_start_x = velocity_start_x * delta_t;
    velocity_start_y = velocity_start_y * delta_t;
    velocity_end_x = velocity_end_x * delta_t;
    velocity_end_y = velocity_end_y * delta_t;
    
    
    % Hermite spline coefficients
    p0 = 2*tau3 - 3*tau2 + 1;
    m0 = tau3 - 2*tau2 + tau;
    p1 = -2*tau3 + 3*tau2;
    m1 = tau3 - tau2;
    
    % Hermite spline derivative coefficients
    dp0 = 6*tau2 - 6*tau;
    dm0 = 3*tau2 - 4*tau + 1;
    dp1 = -6*tau2 + 6*tau;
    dm1 = 3*tau2 - 2*tau;
    
    % Hermite spline second derivative coefficients
    ddp0 = 12*tau - 6;
    ddm0 = 6*tau - 4;
    ddp1 = -12*tau + 6;
    ddm1 = 6*tau - 2;    
    
    position_x     =  position_start_x *   p0 + velocity_start_x *   m0 + position_end_x *   p1 + velocity_end_x *   m1;
    position_y     =  position_start_y *   p0 + velocity_start_y *   m0 + position_end_y *   p1 + velocity_end_y *   m1;
    velocity_x     = (position_start_x *  dp0 + velocity_start_x *  dm0 + position_end_x *  dp1 + velocity_end_x *  dm1) / delta_t;
    velocity_y     = (position_start_y *  dp0 + velocity_start_y *  dm0 + position_end_y *  dp1 + velocity_end_y *  dm1) / delta_t;
    acceleration_x = (position_start_x * ddp0 + velocity_start_x * ddm0 + position_end_x * ddp1 + velocity_end_x * ddm1) / (delta_t*delta_t);
    acceleration_y = (position_start_y * ddp0 + velocity_start_y * ddm0 + position_end_y * ddp1 + velocity_end_y * ddm1) / (delta_t*delta_t);
    
    yaw = atan2(velocity_y, velocity_x);
    speed = sqrt(velocity_x.^2 + velocity_y.^2);
    
    curvature = (velocity_x .* acceleration_y - velocity_y .* acceleration_x) ./ (speed.^3);
    
    
end

